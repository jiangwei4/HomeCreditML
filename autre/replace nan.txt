
from sklearn.impute import SimpleImputer

=================

columns = (data_train.isna().mean()).sort_values() >0
columns_index = columns.index[columns.values == True]

imputer = KNNImputer(n_neighbors= 2)


# imputer = KNNImputer(n_neighbors=5)
# df = data_train(imputer.fit_transform(data_train),columns = data_train.columns)
# df.isna().any()

# print(columns_index)

pbar = tqdm(total=1)
for column in columns_index:
    
    impute_with_2 = imputer.fit_transform([data_train[column]])[0]
#     print(impute_with_2[0:5])
#     print(data_train[column].head())
    
    print("Colonne : "+ column + " -- taille KNN : "+str(len(impute_with_2)) + " -- taille colonne: "+str(len(data_train[column])))
    
#     nulls = data_train[data_train[column].isna()]

#     for i, ni in enumerate(nulls.index[:len(impute_with_2)]):
#         data_train[column].loc[ni] = impute_with_2[i]

    pbar.update(1/(len(columns_index)))
pbar.close()


# data_train.head()


======================

imp_median= SimpleImputer(missing_values=np.nan, strategy='median')

pbar = tqdm(total=1)
for column in columns_index:
    
    imp_median= imp_median.fit(data_train[[column]])
    data_train[column] = imp_median.transform(data_train[[column]]).ravel()
#     print(len(column_values))
    
#     for i, ni in enumerate(data_train[column].index[:len(column_values)]):
#         data_train[column].loc[ni] = column_values[i]
# #     print(data_train[column])


    pbar.update(1/(len(columns_index)))
pbar.close()

